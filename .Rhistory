renv::snapshot()
install.packages("usethis")
warnings()
renv::status()
install.package("golem")
install.packages("golem")
install.packages("config", "covrpage")
renv::status()
renv::init()
remove.packages("renv")
install.packages("shiny")
install.packages("shiny")
renv::clean
renv::status()
install.packages("golem")
install.packages(c("here", "config"), lib="C:/Users/Stefan/AppData/Local/R/cache/R/renv/library/aktienanalyse-892a4841/R-4.1/x86_64-w64-mingw32")
renv::status()
renv::dependencies()
renv::activate()
renv::init()
renv::update()
remotes::install_github('yonicd/covrpage')
renv::status()
renv::snapshot()
renv::status()
usethis::use_github()
#
#
#
usethis::use_package("bs4dash", type = "Imports", min_version = TRUE )
#
#
#
usethis::use_package("bs4Dash", type = "Imports", min_version = TRUE )
attachment::att_amend_desc()
usethis::use_proprietary_license("Stefan Tauber")
#
#
#
usethis::use_package("bs4Dash", type = "Imports", min_version = TRUE )
attachment::att_amend_desc()
#
#
#
usethis::use_package("bs4Dash", type = "Imports", min_version = TRUE )
attachment::att_amend_desc()
devtools::load_all(".")
run_app()
# Package RVEST for scraping html sites
library(data.table)
library(rvest)
#Ariva.de Seite eintragen, bei der alle Indizes gelistet sind
indizes <- read_html("https://www.ariva.de/aktien/realtime-listen")
library(data.table)
library(rvest)
library(tidyverse)
library(writexl)
usethis::use_package("rvest", type = "Imports", min_version = TRUE )
usethis::use_package("data.table", type = "Imports", min_version = TRUE )
golem::add_fct("abfrage_kurse", with_test = TRUE)
attachment::att_amend_desc()
run_app()
attachment::att_amend_desc()
attachment::att_amend_desc()
renv::snapshot()
url <- "https://www.ariva.de/s_p_500-index/kursliste"
#Den HTML Quelltext der Seite auslesen
quelltext <- read_html(url)
#Finden der Input-Forms (auch der hidden forms) für den paging Befehl
#Ich nehme das Listenelement 4 hier schon mit rein, da ich weiß, dass es dieses Input Form ist
#Ansonsten wird eine Liste mit allen ermittelten Forms zurück gegeben
hidden_form <- html_form(quelltext)[[4]]
#Anpassen der Form, so dass 1.000 Ergebnisse pro Seite angezeigt werden
#Das Input field heißt "page_size". Zu Erkennen, in der Abfrage html_form
hidden_form <- html_form_set(hidden_form, page_size = 1000)
#Nun eine neue Anfrage stellen mit dem angepassten hidden form
hidden_form <- html_form_submit(hidden_form)
#Jetzt wieder den HTML Quelltext auslesen und dann die Tabelle mit den Daten extrahieren
quelltext <- read_html(hidden_form)
tabelle <- quelltext %>%
html_nodes("table") %>%
.[4] %>%
html_table() %>%
as.data.table()
view(tabelle)
View(tabelle)
View(quelltext)
View(tabelle)
#Bereinigen der Tabelle
tabelle <- tabelle[X == "", ] #löschen von nicht benötigten Zeilen
tabelle <- tabelle[, c("X", "X.1", "X.2", "X.3", "X.4", "X.5", "Änderung.1", "Weitere.Links", "Zeit") := NULL] #löschen von nicht benötigten Spalten
tabelle <- arrange(tabelle, Name) %>%
distinct(unternehmensnamen, links, .keep_all = TRUE) #Duplicate entfernen
tabelle <- tabelle %>%
distinct(unternehmensnamen, links, .keep_all = TRUE) #Duplicate entfernen
View(tabelle)
#Bereinigen der Tabelle
tabelle <- tabelle[X == "", ] #löschen von nicht benötigten Zeilen
tabelle <- tabelle[, c("X", "X.1", "X.2", "X.3", "X.4", "X.5", "Änderung.1", "Weitere.Links", "Zeit") := NULL] #löschen von nicht benötigten Spalten
tabelle <- setorder(tabelle, Name)
url <- "https://www.ariva.de/prime_all_share_performance-index/kursliste"
#Den HTML Quelltext der Seite auslesen
quelltext <- read_html(url)
#Finden der Input-Forms (auch der hidden forms) für den paging Befehl
#Ich nehme das Listenelement 4 hier schon mit rein, da ich weiß, dass es dieses Input Form ist
#Ansonsten wird eine Liste mit allen ermittelten Forms zurück gegeben
hidden_form <- html_form(quelltext)[[4]]
#Anpassen der Form, so dass 1.000 Ergebnisse pro Seite angezeigt werden
#Das Input field heißt "page_size". Zu Erkennen, in der Abfrage html_form
hidden_form <- html_form_set(hidden_form, page_size = 1000)
#Nun eine neue Anfrage stellen mit dem angepassten hidden form
hidden_form <- html_form_submit(hidden_form)
#Jetzt wieder den HTML Quelltext auslesen und dann die Tabelle mit den Daten extrahieren
quelltext <- read_html(hidden_form)
tabelle <- quelltext %>%
html_nodes("table") %>%
.[4] %>%
html_table() %>%
as.data.table()
#Bereinigen der Tabelle
tabelle <- tabelle[X == "", ] #löschen von nicht benötigten Zeilen
tabelle <- tabelle[, c("X", "X.1", "X.2", "X.3", "X.4", "X.5", "Änderung.1", "Weitere.Links", "Zeit") := NULL] #löschen von nicht benötigten Spalten
tabelle <- setorder(tabelle, Name)
View(tabelle)
duplicated(tabelle)
tabelle <- tabelle[!duplicated(tabelle$Name), ]
devtools::document() #Dokumentation erstellen
?abfrage_kurse
devtools
devtools::load_all()
run_app()
devtools::document() #Dokumentation erstellen
?anfrage_kurse
?abfrage_kurse
devtools::document() #Dokumentation erstellen
?abfrage_kurse
usethis::use_pkgdown() #Webseite initial erstellen
pkgdown::build_site() #Webseite aktualisieren
devtools::load_all()
run_app()
devtools::document() #Dokumentation erstellen
devtools::document() #Dokumentation erstellen
?abfrage_kurse
devtools::load_all()
?abfrage_kurse
devtools::load_all()
devtools::document() #Dokumentation erstellen
?abfrage_kurse
?abfrage_kurse()
abfrage_kurse("www.ariva.de")
devtools::load_all()
run_app()
abfrage_kurse("www.ariva.de")
stringi::stri_escape_unicode("Ä")
#url <- "https://www.ariva.de/s_p_500-index/kursliste"
url <- "https://www.ariva.de/prime_all_share_performance-index/kursliste"
#Den HTML Quelltext der Seite auslesen
quelltext <- read_html(url)
#Finden der Input-Forms (auch der hidden forms) für den paging Befehl
#Ich nehme das Listenelement 4 hier schon mit rein, da ich weiß, dass es dieses Input Form ist
#Ansonsten wird eine Liste mit allen ermittelten Forms zurück gegeben
hidden_form <- html_form(quelltext)[[4]]
#Anpassen der Form, so dass 1.000 Ergebnisse pro Seite angezeigt werden
#Das Input field heißt "page_size". Zu Erkennen, in der Abfrage html_form
hidden_form <- html_form_set(hidden_form, page_size = 1000)
#Nun eine neue Anfrage stellen mit dem angepassten hidden form
hidden_form <- html_form_submit(hidden_form)
#Jetzt wieder den HTML Quelltext auslesen und dann die Tabelle mit den Daten extrahieren
quelltext <- read_html(hidden_form)
tabelle <- quelltext %>%
html_nodes("table") %>%
.[4] %>%
html_table() %>%
as.data.table()
#Bereinigen der Tabelle
tabelle <- tabelle[X == "", ] #löschen von nicht benötigten Zeilen
tabelle <- tabelle[, c("X", "X.1", "X.2", "X.3", "X.4", "X.5", "\u00c4nderung.1", "Weitere.Links", "Zeit") := NULL] #löschen von nicht benötigten Spalten
tabelle <- setorder(tabelle, Name) #Tabelle nach Unternehmensnamen sortieren
tabelle <- tabelle[!duplicated(tabelle$Name), ] #Duplikate, falls vorhanden, entfernen
View(tabelle)
devtools::document() #Dokumentation erstellen
devtools::load_all()
?abfrage_kurse
devtools::document() #Dokumentation erstellen
devtools::document() #Dokumentation erstellen
?abfrage_kurse
devtools::document() #Dokumentation erstellen
?abfrage_kurse
devtools::document() #Dokumentation erstellen
?abfrage_kurse
library(aktienanalyse)
?abfrage_kurse
attachment::att_amend_desc()
devtools::document() #Dokumentation erstellen
devtools::load_all()
document()
